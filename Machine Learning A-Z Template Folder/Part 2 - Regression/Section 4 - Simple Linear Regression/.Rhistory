print("Hello World!")
setwd("C:/Users/knohy/Projects/Coding/MachineLearning/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing")
setwd("C:/Users/knohy/Projects/Coding/MachineLearning/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing")
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Age)
View(dataset)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'), # c is a vector. Create c vectory with France , S, G as elements
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
install.packages('caTools')
library(caTools) # Incorporate the library in your code
install.packages('bitops')
library(caTools) # Incorporate the library in your code
set.seed(123) # Incoporate random
split = sample.split(dataset$Purchased, SplitRatio = 8/10) # incorpo
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == false)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
View(training_set)
View(training_set)
View(training_set)
View(training_set)
View(test_set)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
training_set[,2:3] = scale(training_set[,2:3]) # Problem Countires and Purchased are factors. Not numeric
test_set[,2:3] = scale(test_set[,2:3])
setwd("C:/Users/knohy/Projects/Coding/MachineLearning/Udemy/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset = read.csv('Salary_Data.csv')
View(test_set)
View(test_set)
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 8/10) # Create the method to split the dataset
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$YearsExperience, SplitRatio = 8/10) # Create the method to split the dataset
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3) # Create the method to split the dataset
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = trainig_set) # salary is proporation al to Years of Experience
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set) # salary is proporation al to Years of Experience
View(regressor)
View(regressor)
View(regressor)
summary regressor
summary regressor
summary(regressor)
View(test_set)
Y_pred = predict(regressor, newdata = test_set)
Y_pred
View(test_set)
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs. Experience (Training Set)') +
xlab('Years of Experience') +
ylabe('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs. Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geomline(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs. Experience (Testing Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs. Experience (Testing Set)') +
xlab('Years of Experience') +
ylab('Salary')
