# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, -14] = scale(training_set[, -14])
test_set[, -14] = scale(test_set[, -14])
library(MASS)
lda = lda(formula = Customer_Segment ~.,
data = training_set)
training_set = predict(lda, training_set) # Need to make sure we have a dataframe for the training set
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, -14] = scale(training_set[, -14])
test_set[, -14] = scale(test_set[, -14])
# Apply LDA
#install.packages('MASS')
library(MASS)
lda = lda(formula = Customer_Segment ~.,
data = training_set)
# Number of linear discrimant k-1. 3 classes have 2 linear discriminant
training_set = as.data.frame(predict(lda, training_set)) # Need to make sure we have a dataframe for the training set
View(training_set)
training_set = training_set[c(5,6,1)]
View(test_set)
View(training_set)
test_set = predict(lda, test_set[-14])
test_set = as.data.fram(predict(lda, test_set[-14]))
test_set = as.data.frame(predict(lda, test_set[-14]))
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, -14] = scale(training_set[, -14])
test_set[, -14] = scale(test_set[, -14])
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, -14] = scale(training_set[, -14])
test_set[, -14] = scale(test_set[, -14])
library(MASS)
lda = lda(formula = Customer_Segment ~.,
data = training_set)
# Number of linear discrimant k-1. 3 classes have 2 linear discriminant
training_set = as.data.frame(predict(lda, training_set)) # Need to make sure we have a dataframe for the training set
training_set = training_set[c(5,6,1)]
test_set = as.data.frame(predict(lda, test_set))
test_set = test_set[c(5,6,1)]
View(test_set)
library(e1071)
# Fitting the Regression Model to the dataset
# Create your regressor here
classifier = svm(formula = Customer_Segment ~.,
data = training_set,
type = 'C-classification',
kernel = 'linear')
summary(classifier)
library(e1071)
# Fitting the Regression Model to the dataset
# Create your regressor here
classifier = svm(formula = Customer_Segment ~.,
data = training_set,
type = 'C-classification',
kernel = 'linear')
View(training_set)
library(e1071)
# Fitting the Regression Model to the dataset
# Create your regressor here
classifier = svm(formula = class ~.,
data = training_set,
type = 'C-classification',
kernel = 'linear')
summary(classifier)
# Predicting a new result
y_pred = predict(classifier, type = 'response', test_set[-3])
y_pred
cm = table(test_set[,3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set) = c('x.LD1','x.LD2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,-3],
main = 'Logistic Regression (Training Set)',
xlab = 'LD1',
ylab =  'LD2',
xlim = range(X1),
ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[,3] == 2, 'blue3', ifelse(set[,3] == 1, 'green4', 'red3')))
setwd("C:/Users/knohy/Projects/Coding/MachineLearning/Udemy/Machine Learning A-Z Template Folder/Part 9 - Dimensionality Reduction/Section 45 - Kernel PCA")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
install.packages('kernlab')
library('kernlab')
kpca = kpca(~.,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
training_set_pca = as.data.frame(predict(kpca, training_set))
training_set_pca$Purchased = training_set$Purchased
View(training_set_pca)
test_set = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# Apply Kernel PCA
#install.packages('kernlab')
library('kernlab')
kpca = kpca(~.,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
training_set_pca = as.data.frame(predict(kpca, training_set))
training_set_pca$Purchased = training_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
training_set = training_set_pca
test_set = test_set_pca
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
summary(classifier)
prob_pred = predict(classifier, type = 'response', test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(test_set[,3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set) = c('V1','V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[,-3],
main = 'Logistic Regression (Training Set)',
xlab = 'PC1',
ylab =  'PC2',
xlim = range(X1),
ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3] == 1, 'green4', 'red3'))
setwd("C:/Users/knohy/Projects/Coding/MachineLearning/Udemy/Machine Learning A-Z Template Folder/Part 10 - Model Selection & Boosting/Section 48 - Model Selection")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# Create your classifier here
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
library(caret)
# Kernel SVM template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# Create your classifier here
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Apply k-fold validation
#install.packages('caret')
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
cv = lapply(list = folds, function(x) { # Creating a new local variable
training_fold = training_set[-x, ]
test_fold = training_fold[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
# Kernel SVM template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# Create your classifier here
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Apply k-fold validation
#install.packages('caret')
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
cv = lapply(list = folds, FUN(x) { # Creating a new local variable
training_fold = training_set[-x, ]
test_fold = training_fold[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
# Kernel SVM template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# Create your classifier here
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Apply k-fold validation
#install.packages('caret')
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
cv = lapply(list = folds, FUN = function(x) { # Creating a new local variable
training_fold = training_set[-x, ]
test_fold = training_fold[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
# Kernel SVM template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# Create your classifier here
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Apply k-fold validation
#install.packages('caret')
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
cv = lapply(list = folds, FUN = function(X) { # Creating a new local variable
training_fold = training_set[-X, ]
test_fold = training_fold[X, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
# Kernel SVM template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# Create your classifier here
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
cv = lapply(list = folds, FUN = function(X) {  # Creating a new local variable
training_fold = training_set[-X, ]
test_fold = training_fold[X, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
cv = lapply(list = folds, function(X) {  # Creating a new local variable
training_fold = training_set[-X, ]
test_fold = training_fold[X, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
cv = lapply(list = folds, FUN(X) {  # Creating a new local variable
training_fold = training_set[-X, ]
test_fold = training_fold[X, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
cv = lapply(folds, function(X) {  # Creating a new local variable
training_fold = training_set[-X, ]
test_fold = training_fold[X, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
# Kernel SVM template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# Create your classifier here
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Apply k-fold validation
#install.packages('caret')
library(caret)
folds = createFolds(training_set$Purchased, times = 10)
