dataset = read.csv('Position_Salaries.csv')
dataset
setwd("C:/Users/knohy/Projects/Coding/MachineLearning/Udemy/Machine Learning A-Z Template Folder/Part 10 - Model Selection & Boosting/Section 49 - XGBoost")
install.packages('xgboost')
# Implement XGBoost
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Encoding the data categorical data
# Need to set as factors and numeric
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# split the dataset into training and test set
#install.packages('bitops')
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 8/10) # Create the method to split the dataset
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
View(test_set)
classifier = xgboost(data = as.matrix(training_set[-11]),
label = as.vector(training_set[11]),
n_rounds = 10)
library('xgboost')
classifier = xgboost(data = as.matrix(training_set[-11]),
label = as.vector(training_set[11]),
n_rounds = 10)
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Encoding the data categorical data
# Need to set as factors and numeric
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# split the dataset into training and test set
#install.packages('bitops')
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 8/10) # Create the method to split the dataset
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting XGBoost to the training set
#install.packages('xgboost')
library('xgboost')
classifier = xgboost(data = as.matrix(training_set[-11]),
label = as.vector(training_set[11]),
n_rounds = 10)
classifier = xgboost(data = as.matrix(training_set[-11]),
labels = as.vector(training_set[11]),
n_rounds = 10)
#install.packages('xgboost')
library('xgboost')
classifier = xgboost(data = as.matrix(training_set[-11]),
labels = as.vector(training_set$Exited),
n_rounds = 10)
library('xgboost')
classifier = xgboost(data = as.matrix(training_set[-11]),
label = as.vector(training_set$Exited),
n_rounds = 10)
classifier = xgboost(data = as.matrix(training_set[-11]),
label = as.vector(training_set$Exited),
nrounds = 10)
library(caret)
folds = createFolds(training_set$Exited, k = 10)
cv = lapply(folds, function(x) {  # Creating a new local variable
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = xgboost(data = as.matrix(training_set[-11]),
label = as.vector(training_set$Exited),
n_rounds = 10)
y_pred = (y_pred>=0.5) # Because xgboost will return a probability
y_pred = predict(classifier, newdata = as.matrix(test_fold[-11]))
cm = table(test_fold[ ,11], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
library(caret)
folds = createFolds(training_set$Exited, k = 10)
cv = lapply(folds, function(x) {  # Creating a new local variable
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = xgboost(data = as.matrix(training_set[-11]),
label = as.vector(training_set$Exited),
nrounds = 10)
y_pred = (y_pred>=0.5) # Because xgboost will return a probability
y_pred = predict(classifier, newdata = as.matrix(test_fold[-11]))
cm = table(test_fold[ ,11], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
#install.packages('caret')
library(caret)
folds = createFolds(training_set$Exited, k = 10)
cv = lapply(folds, function(x) {  # Creating a new local variable
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = xgboost(data = as.matrix(training_set[-11]),
label = as.vector(training_set$Exited),
nrounds = 10)
y_pred = predict(classifier, newdata = as.matrix(test_fold[-11]))
y_pred = (y_pred>=0.5) # Because xgboost will return a probability
cm = table(test_fold[ ,11], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
accuracy
